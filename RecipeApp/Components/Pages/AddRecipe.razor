@page "/addrecipe"
@inject IAdminCreateRecipeService _iAdminCreateRecipeService
@inject IProduceRepository _iProduceRepository
@inject IRecipeRepository _iRecipeRepository
@rendermode InteractiveServer

<PageTitle>Opret opskrift</PageTitle>

<h3>Tilføj ny opskrift</h3>

<div class="lists-container">
    <div>
        <h5>Navn på opskrift</h5>
        <div class="mb-auto">
            <TextInput Disabled="@_recipeDisabled" @onfocusout=" () => ValidateName(_tbRecipeName)" @bind-Value="@_tbRecipeName" />
        </div>

        <h5>Opskriftens URL</h5>
        <div>
            <TextInput @onfocusout=" () => ValidateURL(_tbRecipeURL)" Placeholder="Indtast først opskriftens URL." @bind-Value="@_tbRecipeURL" />
        </div>

        <h5>Tilberedningstid i minutter</h5>
        <div>
            <Dropdown Disabled="@_tbDisabled" Color="DropdownColor.Secondary">
                <DropdownToggleButton>@_tbRecipeCookTime</DropdownToggleButton>
                <DropdownMenu class="dropdown-scroll">
                    @foreach (var minutes in cookTimeMinutes)
                    {
                        <DropdownItem @onclick="() => CookTimeSelection(minutes)">@minutes</DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>
        </div>
    </div>

    <div>
        <h5>Ingredienser</h5>
        <div>
            <AutoComplete @bind-Value="_selectedProduce"
            TItem="Produce"
            DataProvider="ProduceDataProvider"
            PropertyName="Name"
            Placeholder="Tilføj ingredienser..."
            OnChanged="(Produce produce) => AddProduce(produce)"
            @bind-SelectedValue="_selectedProduce" 
            Disabled="@_tbDisabled"/>
        </div>
        <div>
            @foreach (var produce in addedProduces)
            {
                <Button Color="ButtonColor.Primary" Outline="true" @onclick="() => RemoveProduce(produce)"> @produce.Name </Button>
                <NumberInput TValue="int" @bind-Value="@produce.RecipeAmount"></NumberInput>
            }
        </div>
    </div>
</div>
<div class="center-items">
    @if (_alertMessage == "urlExists")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Denne opskrift findes allerede i databasen!</Alert>
    }
    @if (_alertMessage == "urlEmpty")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Indtast venligst opskriftens URL!</Alert>
    }
    @if (_alertMessage == "urlInvalid")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Denne URL er ugyldig!</Alert>
    }
    @if (_alertMessage == "urlValid")
    {
        <Alert Color="AlertColor.Success"><Icon Name="IconName.CheckCircleFill"></Icon> Denne URL er gyldig!</Alert>
    }
    @if (_alertMessage == "valid")
    {
        <Alert Color="AlertColor.Success"><Icon Name="IconName.CheckCircleFill"></Icon> Opskriftens navn er gyldig!</Alert>
    }
    @if (_alertMessage == "invalid")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Dette navn er ugyldigt!</Alert>
    }
    @if (_alertMessage == "noName")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Indtast venligst opskriftens navn!</Alert>
    }
    @if (_alertMessage == "noProduces")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Du skal tilføje ingredienser først!</Alert>
    }
    @if (_alertMessage == "noCookTime")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Du skal angive tilberedningsminutter først!</Alert>
    }
    @if (_alertMessage == "recipeAdded")
    {
        <Alert Color="AlertColor.Success"><Icon Name="IconName.CheckCircleFill"></Icon> Opskriften er tilføjet!</Alert>
    }
    @if (_alertMessage == "error")
    {
        <Alert Color="AlertColor.Danger"><Icon Name="IconName.ExclamationTriangleFill"></Icon> Der opstod en fejl.</Alert>
    }
    <Button Disabled="@_tbDisabled" Color="ButtonColor.Success" @onclick="() => AdminAddRecipe(_tbRecipeName, _tbRecipeCookTime, _tbRecipeURL, addedProduces)">Tilføj opskrift</Button>
</div>

<style>
    .lists-container {
    display: flex;
    grid-template-columns: 1fr 1fr;
    gap: 10px;
    }

    .lists-container div {
    flex: 1;
    padding: 10px;
    border-radius: 5px;
    }

    .dropdown-scroll {
    max-height: 175px;
    overflow-y: scroll;
    }

    .center-items {
    text-align: center;
    }
</style>

@code {

    private string? _tbRecipeName = null;
    private string? _tbRecipeURL = null;
    private string? _tbRecipeCookTime = "Angiv tilberedningstid...";
    private string? _alertMessage = null;
    private bool _tbDisabled = true;
    private bool _recipeDisabled = true;
    private string? _selectedProduce;

    private void Enable() => _tbDisabled = false;
    private void Enable(int i) => _recipeDisabled = false;
    private void Disable() => _tbDisabled = true;
    private void Disable(int i) => _recipeDisabled = true;

    List<Produce>? listOfProduce;
    List<Produce>? addedProduces;
    List<int>? cookTimeMinutes;

    // //AdminCreateRecipe
    // private string RecipeNameInput { get; set; }
    // private int CookTimeInput { get; set; }
    // private string URLinput { get; set; }
    // //private Recipe newRecipe = new Recipe(RecipeNameInput, CookTimeInput, URLinput);

    protected override void OnInitialized()
    {
        listOfProduce = _iAdminCreateRecipeService.AllProduceWhenAdminCreateRecipe;
        addedProduces = _iAdminCreateRecipeService.SelectedProduceWhenAdminCreateRecipe;
        cookTimeMinutes = _iAdminCreateRecipeService.GetCookTimes;
    }

    private async Task<AutoCompleteDataProviderResult<Produce>> ProduceDataProvider(AutoCompleteDataProviderRequest<Produce> request)
    {
        return await Task.FromResult(request.ApplyTo(listOfProduce.OrderBy(produce => produce.Name)));
    }

    private void AddProduce(Produce produce)
    {
        if (produce != null)
        {
            _iAdminCreateRecipeService.AddProduceToNewRecipe(produce);
            listOfProduce = _iAdminCreateRecipeService.AllProduceWhenAdminCreateRecipe;
            addedProduces = _iAdminCreateRecipeService.SelectedProduceWhenAdminCreateRecipe;
        }
    }

    private void RemoveProduce(Produce produce)
    {
        _iAdminCreateRecipeService.RemoveProduceFromNewRecipe(produce);
        listOfProduce = _iAdminCreateRecipeService.AllProduceWhenAdminCreateRecipe;
        addedProduces = _iAdminCreateRecipeService.SelectedProduceWhenAdminCreateRecipe;
    }

    private void ValidateURL(string tbRecipeURL)
    {
        _alertMessage = _iAdminCreateRecipeService.ValidateURL(tbRecipeURL);
        if (_alertMessage == "urlValid")
        {
            _recipeDisabled = false;
        }
        if (_alertMessage == "urlExists" || _alertMessage == "urlInvalid" || _alertMessage == "urlEmpty")
        {
            _tbDisabled = true;
            _recipeDisabled = true;
        }
    }

    private void ValidateName(string nameInput)
    {
        _alertMessage = _iAdminCreateRecipeService.ValidateRecipeName(nameInput);
        if (_alertMessage == "invalid")
        {
            _recipeDisabled = false;
            _tbDisabled = true;
        }
        if (_alertMessage == "valid")
        {
            _recipeDisabled = false;
            _tbDisabled = false;
        }
    }

    private void CookTimeSelection(int minutes)
    {
        _tbRecipeCookTime = minutes.ToString();
    }

    private void AdminAddRecipe(string recipeName, string cookTime, string uRL, List<Produce> produceList)
    {
        if (addedProduces.Count <= 0)
        {
            _alertMessage = "noProduces";
        }
        else if (_tbRecipeCookTime == "Angiv tilberedningstid...")
        {
            _alertMessage = "noCookTime";
        }
        else
        {
            int intCookTime = Convert.ToInt32(cookTime);
            bool creationSuccess = _iAdminCreateRecipeService.AddRecipe(recipeName, intCookTime, uRL, produceList);
            if (creationSuccess)
            {
                _alertMessage = "recipeAdded";
                _tbRecipeName = null;
                _tbRecipeURL = null;
                _tbRecipeCookTime = "Angiv tilberedningstid...";
                _tbDisabled = true;
                _recipeDisabled = true;
                _selectedProduce = null;
                _iAdminCreateRecipeService.ClearAddedProduces();
            }
            else if (!creationSuccess)
            {
                _alertMessage = "error";
            }
        }
    }
}
