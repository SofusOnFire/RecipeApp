@page "/"
@inject IUserProduceService userProduceService
@inject IProduceRepository _iProduceRepository
@inject IProduceService _iProduceService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="lists-container">
	<div>
		<h4>Your Produce</h4>
		<ul>
			@foreach (var produce in yourProduce)
			{
				<li style="display: flex; justify-content: align-items: center;">
					<pre>@produce.Name.PadRight(30)</pre>

					<input type="number" class="input" @bind="@produce.UserAmount" @bind:event="oninput" @onchange="(e) => ClampUserAmount(produce)" />
					@produce.Unit.UnitName
					<img style="margin-left: auto;" src="/img/trashcan.svg" @onclick="() => MoveProduceBetweenLists(produce)" />
				</li>
			}
		</ul>
	</div>
	<div>
		<h4>All Produce</h4>
		<ul>
			@foreach (var produce in listOfProduce)
			{
				<li @onclick=" () => MoveProduceBetweenLists(produce)">@produce.Name</li>
			}
		</ul>
	</div>
</div>

<style>
	.input {
		border: 2px solid transparent;
		width: 5em;
		height: 1.5em;
		padding-left: 0.8em;
		outline: none;
		overflow: hidden;
		background-color: #F3F3F3;
		border-radius: 10px;
		transition: all 0.5s;
	}

	.input:hover,
	.input:focus {
		border: 2px solid #4A9DEC;
		box-shadow: 0px 0px 0px 7px rgb(74, 157, 236, 20%);
		background-color: white;
	}

	.lists-container {
	display: flex;
	grid-template-columns: 1fr 1fr;
	gap: 10px;
	}

	.lists-container div {
	flex: 1;
	border: 1px solid #ccc;
	padding: 10px;
	border-radius: 5px;
	background-color: #f9f9f9;
	}

	li {
	cursor: pointer;
	padding: 5px;
	list-style: none;
	}

	li:hover {
	background-color: #ddd;
	transform: scale(1.02);
	border-radius: 10px;
	}
</style>

@code {

	List<Produce>? listOfProduce;
	List<Produce>? yourProduce;


	protected override void OnInitialized()
	{
		yourProduce = userProduceService.UserProduceList;
		listOfProduce = _iProduceService.CompareAndGetProduceList(yourProduce);
	}

	private void MoveProduceBetweenLists(Produce produce)
	{
		userProduceService.MoveBetweenList(produce, listOfProduce);
	}

	/// <summary>
	/// Sets the UserAmount to between 0 and 1000. No matter what the user writest
	/// </summary>
	/// <param name="produce"></param>
	private void ClampUserAmount(Produce produce)
	{
		produce.UserAmount = Math.Clamp(produce.UserAmount, 0, 1000);
		if (produce.UserAmount == 0) MoveProduceBetweenLists(produce); // If the value is 0. Remove it from list
	}
}