@page "/weather"
@inject IRecipeService _iRecipeService
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Opskrifter</h1>

<div style="display: flex; flex-direction: column; gap: 10px;">
    @foreach (var recipe in listOfMatchedRecipes)
    {
        <a class="recipe-card" href="@recipe.URL">
            <div class="recipe-card-info" style="margin-left: auto; margin-right: auto;">
                <h1 style="font-family: Arial;">@recipe.RecipeName</h1>
                <div style="display: flex; flex-wrap: wrap; column-gap: 8px; row-gap: 5px; align-items: flex-start;">
                    <p class="produce" style="font-family: Arial; font-weight: 600; font-size: 16px; padding: 3px 0px 3px 0px; margin: 0;">Ingredienser:</p>
                    @foreach (var produceLine in recipe.ProduceLines)
                    {
                        @if (produceLine._Produce.InStock == true)
                        {
                            <p style="background-color: #00ab45; color: white; font-family: Arial; font-weight: 600; letter-spacing: 0.5px; border-radius: 15px; padding: 3px 9px; margin: 0; white-space: nowrap;">@produceLine._Produce.Name</p>
                        }
                        else
                        {
                            <p style="background-color: #C21807; color: white; font-family: Arial; font-weight: 600; letter-spacing: 0.5px; border-radius: 15px; padding: 3px 9px; margin: 0; white-space: nowrap;">@produceLine._Produce.Name</p>
                        }
                    }
                </div>
                <h2 style="margin-top: 5px;">Tilberedningstid: @recipe.CookTime minutter</h2>
            </div>
        </a>
    }
</div>

<style>
    .recipe-card {
    all: unset;
    background-color: #f9f9f9;
    border: 1px solid #ccc;
    cursor: pointer;
    border-radius: 20px;
    width: 80%;
    padding: 10px;
    height: auto;
    display: flex;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .recipe-card:hover {
    transform: scale(1.02);
    }
</style>

@code {
    private List<Recipe>? listOfMatchedRecipes;

    protected override void OnInitialized()
    {
        listOfMatchedRecipes = _iRecipeService.FindRecipes().ToList(); // Makes the recieved IEnumerable to manipulative list
        
        // Sorts the produce by produce in stock, from InStock to notInStock
        // Iterates through all the recieved recipes
        foreach (var recipe in listOfMatchedRecipes)
        {
            // List to store produce the user doesn't have in stock
            List<ProduceLine> notInStockProduces = new List<ProduceLine>();

            if (recipe.ProduceLines == null) // If the recipe doesn't have any produce, get the next recipe
                continue;

            // Iterates through all of the lines of the current recipe
            for (int i = 0; i < recipe.ProduceLines.Count; i++)
            {
                // If the user doesn't have the produce, adds to notInStock and remove from current list
                if (recipe.ProduceLines[i]._Produce.InStock == false)
                {
                    notInStockProduces.Add(recipe.ProduceLines[i]);
                    recipe.ProduceLines.RemoveAt(i);
                    i--; // Stays at same iteration for the next loop
                }
            }

            recipe.ProduceLines.AddRange(notInStockProduces); // Append notInStock to the listOfMatchedRecipes
        }
    }
}
